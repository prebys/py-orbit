#summary Summary particle diagnostics package.
= Summary =
The diagnostics package includes routines for finding the statistical Twiss parameters of a bunch, the moments, and the tunes and actions. 

= Associated Classes =

|| *Name* || *Description* || *Address* ||
|| BunchTwissAnalysis || The c++ class which calculates the statistical twiss parameters and moments || $ORBIT_ROOT/src/orbit/BunchDiagnostics/ ||
|| BunchTuneAnalysis || The c++ class  which calculates particle tunes and actions || $ORBIT_ROOT/src/orbit/BunchDiagnostics/ ||
|| StatLats || The python class which calculates and prints the statistical twiss parameters. || $ORBIT_ROOT/py/orbit/diagnostics/diagnostics.py||
|| StatLatsSetMember || The same as StatLats but for use in a  set || $ORBIT_ROOT/py/orbit/diagnostics/diagnostics.py||
|| Moments || The python class which calculates and prints the beam moments. || $ORBIT_ROOT/py/orbit/diagnostics/diagnostics.py||
|| MomentsSetMember || The same as Moments but for use in a set || $ORBIT_ROOT/py/orbit/diagnostics/diagnostics.py||
|| TeapotStatLatsNode || The teapot implementation of the StatLats class || $ORBIT_ROOT/py/orbit/diagnostics/TeapotDiagnosticsNode.py||
|| TeapotStatLatsNodeSetMember || The same as TeaPotStatLatsNode but for use in a set || $ORBIT_ROOT/py/orbit/diagnostics/TeapotDiagnosticsNode.py||
|| TeapotMomentsNode || The Teapot implementation of the moments class || $ORBIT_ROOT/py/orbit/diagnostics/TeapotDiagnosticsNode.py||
|| TeapotMomentsNodeSetMember || The same as TeapotMomentsNode but for use in a  set || $ORBIT_ROOT/py/orbit/diagnostics/TeapotDiagnosticsNode.py||
|| addTeapotDiagnosticsNode || Adds a diagnostics node to a Teapot lattice || $ORBIT_ROOT/py/orbit/diagnostics/diagnosticsLatticeModifications.py||
|| addTeapotStatLatsNodeSet || Adds a set of StatLats nodes inside a Teapot lattice || $ORBIT_ROOT/py/orbit/diagnostics/diagnosticsLatticeModifications.py||
|| addTeapotMomentsNodeSet || Adds a set of Moments nodes inside a Teapot lattice || $ORBIT_ROOT/py/orbit/diagnostics/diagnosticsLatticeModifications.py||


= Python Accessible Methods and Variables =
    # *analyzeBunch(Bunch bunch)*. Analyzes a bunch.  Must be run before routines that get Twiss parameters directly (e.g. not moments or statlats classes). Variables:
     * bunch: A Bunch.
  # * getCorrelation(int ic, int jc)*. Returns the centered correlation {<(x-<x>)*(y-<y>)> = <x*y> - <x>*<y>}. Variables:
     * ic: Index of the beam phase space coordinate
     * jc: Index of the beam phase space coordinate
  # *getAverage(int ic)*. Returns the average value for coordinate with index ic.
  # *getGlobalCount()*. Returns the total number of analysed macroparticles.
  # *getGlobalMacrosize()*. Returns the total macrosize.
  # *getEmittance(int ic)*. Returns the emittance for index 0,1,2 - x,y,z planes.
  # *getAlpha(int ic)*. Returns Twiss alpha for index 0,1,2 - x,y,z planes.
  # *getBeta(int ic)*.  Returns Twiss beta for index 0,1,2 - x,y,z planes.
  # *getGamma(int ic)*. Returns Twiss gamma for index 0,1,2 - x,y,z planes.
  # *computeBunchMoments(Bunch bunch, int order)*. Computes the XY moments of the bunch up to a prescribed order.  Does the computation but doesn't return any values. Variables:
     * bunch: A Bunch.
     * order: The highest order of the moments.
  # * getBunchMoment(int i, int j)*.  Returns the XY moment of the beam. Values will be nonzero only after computeBunchMoments has been run. 
     * i: Moment order in X.
     * j: Moment order in Y.  
= Example Scripts = 

The following example demonstrates a bunch being propagated through a circular iron collimator of length 0.5 meters and aperture 10 cm whose front face is located 18.5 meters from the start of an existing teapot lattice. It is assumed that the main bunch, "b", is already defined, but that the lost bunch needs creation.  At the end, the main bunch and lost bunch particle parameters are printed. 
{{{


length = 0.5
ma = 3
density_fac = 1.0
shape = 1
a = 0.01
b = 0
c = 0
d = 0
angle = 0

collimator = TeapotCollimatorNode(length, ma, density_fac, shape, a, b, c, d, angle, "Collimator 1")

addTeapotColimatorNode(teapot_latt, 18.5, collimator) 

#------------------------------
#Lost bunch initialization
#------------------------------

lostbunch = Bunch()
lostbunch.addPartAttr("LostParticleAttributes")
paramsDict = {}
paramsDict["lostbunch"]=lostbunch
paramsDict["bunch"]= b

#=====track bunch through Collimator Node============
collimator.track(paramsDict)

# dump ORBIT_MPI bunch to compare results
bunch.dumpBunch()
lostbunch.dumpBunch()
print "Stop."


}}}

In the following piece of code a short 1.5 cm, one-sided flat copper collimator with aperture 5 cm is defined. The collimator is tilted at a 45 degree angle.

{{{

length = 0.015
ma = 4
density_fac = 1.0
shape = 3
a = 0.05
b = 0
c = 0
d = 0
angle = 45

collimator = TeapotCollimatorNode(length, ma, density_fac, shape, a, b, c, d, angle, "Collimator Scraper")

}}}

Complete run examples can be found in $ORBIT_ROOT/examples/Collimation/ORBIT_Benchmarks/ .