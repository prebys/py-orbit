#summary Description of RF Cavity Models for Synchrotrons and Storage Rings.


= Summary =

This page describes the user-accessible python and underlying C++ classes for RF cavities in rings. The models include harmonic accelerating and focusing cavities and also barrier focusing cavities. 


= Associated Classes =

|| *Name* || *Description* || *Address* ||
|| [Barrier_Cav] || C++ class containing barrier cavity model - not directly accessible from python script || $ORBIT_ROOT/src/orbit/RFCavities/ ||
|| [Frequency_Cav] || C++ class containing linac-type cavity model - not directly accessible from python script || $ORBIT_ROOT/src/orbit/RFCavities/ ||
|| [Harmonic_Cav] || C++ class containing harmonic cavity model - not directly accessible from python script || $ORBIT_ROOT/src/orbit/RFCavities/ ||
|| RFNode.Barrier_RFNode || Python class to call barrier cavity model from python script || $ORBIT_ROOT/py/orbit/rf_cavities/ ||
|| RFNode.Frequency_RFNode || Python class to call linac-type cavity model from python script || $ORBIT_ROOT/py/orbit/rf_cavities/ ||
|| RFNode.Harmonic_RFNode || Python class to call harmonic cavity model from python script || $ORBIT_ROOT/py/orbit/rf_cavities/ ||
|| RFNode.BRhoDep_Harmonic_RFNode || Python class to call time-dependent harmonic cavity model from python script. Time dependence is determined by user-provided parameters, with B*Rho determining the energy. || $ORBIT_ROOT/py/orbit/rf_cavities/ ||
|| RFNode.SyncPhaseDep_Harmonic_RFNode || Python class to call time-dependent harmonic cavity model from python script. Time dependence is determined by user-provided parameters, with B*Rho determining the energy. || $ORBIT_ROOT/py/orbit/rf_cavities/ ||
|| !RFNode.TimeDep_Barrier_RFNode || Python class to call time-dependent barrier cavity model from python script. Time dependence is determined by user-provided parameters. || $ORBIT_ROOT/py/orbit/rf_cavities/ ||
|| RFLatticeModifications.addRFNode || Python module that allows a user to add an RF cavity node to the teapot lattice in a drift region || $ORBIT_ROOT/py/orbit/rf_cavities/ ||


= Examples - All found in $ORBIT_ROOT/examples/RF_Tests =

|| *Name* || *Description* ||
|| barrier_rf_cavity_test.py || Simple test of barrier cavity with parameters constant in time.||
|| simple_rf_cavity_test.py || Simple test of harmonic focusing cavity with parameters constant in time.||
|| brhodep_rf_cavity_test.py || Test of accelerating harmonic cavity with time-dependent parameters. Acceleration depends on B*Rho. ||
|| syncphasedep_rf_cavity_test.py || Test of accelerating harmonic cavity with time-dependent parameters. Acceleration depends on synchronous particle phase. ||
|| timedep_barrier_rf_cavity_test.py || Test of barrier focusing cavity with time-dependent parameters. ||



= Python Accessible Methods and Variables =
  # *RFNode.Barrier_RFNode(ZtoPhi, RFVoltage, RFPhasep, RFPhasem, dRFPhasep, dRFPhasem)*. Creates a barrier cavity. 
     * ZtoPhi: unit conversion factor from longitudinal bunch coordinate {m} to fundamental phase {radians}.
     * RFVoltage: Cavity voltage {GeV}.
     * RFPhasep: Center phase of positive barrier {degrees}.
     * RFPhasem: Center phase of negative barrier {degrees}.
     * dRFPhasep: Phase width of positive barrier {degrees}.
     * dRFPhasem: Phase width of negative barrier {degrees}.

  # *RFLatticeModifications.addRFNode(lattice, position, rf_node)*. Places an RF node into a lattice at a specified position. Variables:
     * lattice: Instantiation of an AccLattice.
     * position: Position from the beginning of the lattice {m}. Must fall inside a drift element.
     * rf_node: Instantiation of one of the RFNode classes listed above and described below.
  # *track(Dict paramsDict)*. A method for doing the longitudinal space charge kick. Implemented by the lattice trackBunch method. Variables:  
  # *addLongitudinalSpaceChargeNode(lattice, position, sc1D_node)*. Routine to add a defined SC1D_AccNode to a drift region of a teapot lattice. Variables:
     * lattice: The teapot lattice.
     * position: Position of the SC1D_AccNode element in meters.
     * sc1D_node: A predefined SC1D_AccNode 





Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages