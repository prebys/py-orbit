#summary Summary of how to create and use an aperture.
= Summary =

The aperture class provides a method for losing particles on a zero length, 100% absorbing aperture.  Three types of aperture shapes are available: 1) Circle, ellipse, and rectangle.  The user can apply horizontal and vertical offsets to the aperture. The apertures can be added singly to any drift region in a lattice, or in sets within a positional range in the lattice.  If the set is used, one aperture will be added per drift node in the accelerator. 

The module requires input of two bunches from the Bunch class: one bunch for the alive particles, and one bunch to be populated with particles lost in the aperture. 

= Associated Classes =

|| *Name* || *Description* || *Address* ||
|| Apertures || The class which defines the aperture || $ORBIT_ROOT/src/orbit/Aperture/ ||
|| TeapotApertureNode || The python class that allows a user to define an TeaPot style aperture  || $ORBIT_ROOT/py/orbit/aperture/TeapotApertureNode.py ||
|| CircleApertureNode || Convenience class for quickly creating a  circular TeaPot aperture || $ORBIT_ROOT/py/orbit/aperture/TeapotApertureNode.py ||
|| EllipseApertureNode || Convenience class for quickly creating an elliptical TeaPot aperture || $ORBIT_ROOT/py/orbit/aperture/ TeapotApertureNode.py||
|| RectangleApertureNode || Convenience class for quickly creating a rectangular TeaPot aperture || $ORBIT_ROOT/py/orbit/aperture/TeapotApertureNode.py ||
|| addTeapotApertureNode || The python routine that allows a user to add a defined aperture to the lattice in a drift region || $ORBIT_ROOT/py/orbit/aperture/ApertureLatticeModifications.py||
|| addCircleApertureSet || Python routine that allows a user to add a set of circular apertures to the lattice over a range of distance (one per node) || $ORBIT_ROOT/py/orbit/aperture/ApertureRangeModifications.py||
|| addEllipseApertureSet || Python routine that allows a user to add a set of ellipticalapertures to the lattice over a range of distance (one per node) || $ORBIT_ROOT/py/orbit/aperture/ApertureRangeModifications.py||
|| addRectangleApertureSet || Python routine that allows a user to add a set of rectangular apertures to the lattice over a range of distance (one per node) || $ORBIT_ROOT/py/orbit/aperture/ApertureRangeModifications.py||

= Python Accessible Classes, Methods, and Variables =
  # *TeapotApertureNode(int shape, double a, double b, double c, double d, name = "aperture")*.  Creates a teapot style aperture. Variables:
     * shape: Shape type index. 1=circle, 2=ellipse, 3=rectangle. 
     * a: Radius for circular collimator, x-axis half length for ellipse and rectangle. 
     * b: Y-axis half length for elliptical and rectangle. Doesn't apply for circle. 
     * c: Horizontal offset. Default 0. Argument is optional.
     * d: Vertical offset. Default 0. Argument is optional.
     * name: The name of the aperture.  
  # *CircleApertureNode(double a, double c, double d, name = "aperture")*.  Creates a teapot style aperture. Variables:
     * a: Radius.
     * c: Horizontal offset.  Default 0. Argument is optional.
     * d: Vertical offset. Default 0. Argument is optional.
     * name: The name of the aperture.  
  # *EllipseApertureNode(double a, double b, double c, double d, name = "aperture")*.  Creates a teapot style aperture. Variables:
     * a: X-axis half length.
     * b: Y-axis half length.
     * c: Horizontal offset.  Default 0. Argument is optional.
     * d: Vertical offset. Default 0. Argument is optional.
     * name: The name of the aperture.  
  # *RectangleApertureNode(double a, double b, double c, double d, name = "aperture")*.  Creates a teapot style aperture. Variables:
     * a: X-axis half length.
     * b: Y-axis half length.
     * c: Horizontal offset.  Default 0. Argument is optional.
     * d: Vertical offset. Default 0. Argument is optional.
     * name: The name of the aperture.  
  # *addTeapotApertureNode(TEAPOT_Lattice lattice, double position, TeapotApertureNode aperture)*. A method to add the aperture to a Teapot lattice. Variables: 
     * lattice: The Teapot lattice the aperture should be added to.
     * position: The start position of the aperture in the lattice.
     * aperture: A previously defined aperture
  # *addCircleApertureSet(double a, TEAPOT_Lattice lattice, double s, double e, double c, double d)*. Adds a set of circular apertures in the range from variable s to e.  Variables:
     * a: radius
     * lattice: The Teapot lattice the aperture should be added to.
     * s: Start position.
     * e: End position.
     * c: Horizontal offset.  Default 0. Argument is optional.
     * d: Vertical offset. Default 0. Argument is optional.
  # *addEllipseApertureSet(double a, double b, TEAPOT_Lattice lattice, double s, double e, double c, double d)*. Adds a set of elliptical apertures in the range from variable s to e. Variables:
     * a: X-axis half length
     * b: Y-axis half length
     * lattice: The Teapot lattice the aperture should be added to.
     * s: Start position.
     * e: End position.
     * c: Horizontal offset.  Default 0. Argument is optional.
     * d: Vertical offset. Default 0. Argument is optional.
 # *addRectangleApertureSet(double a, double b, TEAPOT_Lattice lattice, double s, double e, double c, double d)*. Adds a set of rectangular apertures in the range from variable s to e. Variables:
     * a: X-axis half length
     * b: Y-axis half length
     * lattice: The Teapot lattice the aperture should be added to.
     * s: Start position.
     * e: End position.
     * c: Horizontal offset.  Default 0. Argument is optional.
     * d: Vertical offset. Default 0. Argument is optional.
= Example Scripts = 

The following example demonstrates the creation of a circular aperture and it's addition to the lattice.  Also shown in comment fields are other aperture options. 
{{{




}}}

Complete run examples can be found in $ORBIT_ROOT/examples/Apertures .