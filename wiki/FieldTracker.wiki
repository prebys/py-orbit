#summary Summary of how to create and use an aperture.
= Summary =

The FieldTracker class provides a method for tracking particles through a 3Diminsional Magnetic field.

The module requires input of one bunche from the Bunch class, and a data file containing the magnetic field data.

= Associated Classes =
|| *Name* || *Description* || *Address* ||
|| [FieldTracker] || The class which defines the FieldTracker || $ORBIT_ROOT/src/orbit/FieldTracker/ ||
|| trackBunch || Method that tracks a bunch through the 3D Field || $ORBIT_ROOT/src/orbit/FieldTracker/ ||
|| setPathVariable|| Method that sets whether or not to output particle paths || $ORBIT_ROOT/src/orbit/FieldTracker/ ||




= Python Accessible Classes, Methods, and Variables =
  # *FieldTracker( double bx, double by, double ax, double ay, double ex, double epx, double l, double zi, double zf, double ds, int niters, double resid, double xrefi, double &yrefi, double &eulerai, double &eulerbi, double &eulergi, Bunch* b)
  * bx: The horizontal beta value at the beginning of the Node [m]
  * by: The vertical beta value at the beginning of the Node [m]
  * ax: The horizontal alpha value at the beginning of the Node
  * ay: The horizontal alpha  value at the beginning of the Node
  * ex: The horizontal dispersion [m]
  * epx: The horizontal dispersion prime
  * l: The length of the node   
  * zi: Initial tracking position [m]
  * zf : Final tracking position [m]
  * ds: Integration step size
  * niters : Number predictor-corrector iterations
  * resid : Predictor-corrector residual
  * xrefi: Initial reference particle x [mm]
  * yrefi: Initial reference particle y [mm]
  * eulerai: Initial reference Euler angle alpha [mr]  
  * eulerbi: Initial reference Euler angle beta [mr]
  * eulergi: Initial reference Euler angle gamma [mr]
 2. *trackbunch(bunch b)*
  * Takes a bunch as arguments
  * Computes the path of each particle in the bunch through the magnet parsed in the constructor.
 3. *setPathVariable(int i)*
  * 0 means that the reference variable path and the particle's path won't be written
  * 1 means that they will
  * Any other int will result in them not being written.

= Example Scripts = 

The following example demonstrates the creation of a fieldtracker object that tracks 1000 particles through the field.
{{{


import math
import sys
from bunch import Bunch
from fieldtracker import FieldTracker
from orbit.parsers.field_parser import Field_Parser3D


print "Start."


#------------------------------
#Main Bunch init
#------------------------------

b = Bunch()
print "Read Bunch."
runName = "Test_FieldTracker"

b.mass(0.93827231)
b.macroSize(1.0e+1)
energy = 1.0 #Gev
b.readBunch("parts.dat")
b.getSyncParticle().kinEnergy(energy)
# b.readBunch("Bunches/controlbunch_600.dat", 1)



#------------------------------------------
#Initial Variables
#------------------------------------------
LA11RB  = 0.940222788932
LC11F1  = 0.307193
LC11C12 = 1.8144
LA12RB  = 0.908319544743
XA11M   = 92.55
YA11M   = 23.0
XFOIL1  = 150.4732
YFOIL1  = 46.0
XPFOIL1  = -0.65387068

XMAG = XA11M
YMAG = YA11M

XSTART = XFOIL1
YSTART = YFOIL1
XPSTART = XPFOIL1
YPSTART = 0.0

XREFI = XSTART - XMAG
YREFI = YSTART - YMAG
XREFITOT = 0.0
YREFITOT = 0.0

EULERA = 0.0
EULERB = -0.65387059
EULERG = 0.0
EULERATOT = 0.0
EULERBTOT = 0.0
EULERGTOT = 0.0

ZSTARTTOT = -2.5
ZSTART = LC11F1
ZTOT = 2.5
ZINT = LC11C12 / 2.0
LTOT = ZTOT - ZSTARTTOT
LINT = ZINT - ZSTART
LINTTOT = ZTOT - ZSTART

XPARSEMIN = -21.0
XPARSEMAX =  21.0
YPARSEMIN = -13.0
YPARSEMAX =  13.0

ZPARSEMIN =  100.0 * ZSTART - 1.0
ZPARSEMAX =  100.0 * ZINT + 1.0

SKIPX = 1 
SKIPY = 1
SKIPZ = 1

#=====track bunch through Foil============
 
zsymmetry = 1
printPaths = 1;


mytracker = FieldTracker( 10.190, 10.758, 0.047, 0.056, -0.001, -0.012,
          LINT,  
          ZSTART, ZINT, 0.0001, 2, 1.e-06,
          XREFI, YREFI, EULERA, EULERB, EULERG,b, "testfile.data")

mytracker.setPathVariable(1)

mytracker.trackBunch(b)


b.dumpBunch("final.dat")

print "\nStop."



}}}

Magnet data needs to be in the format:
where the numbers in the header are the number of steps for x y z respectively.

{{{
          81          49         501           1
 1 X [LENGU]
 2 Y [LENGU]
 3 Z [LENGU]
 4 BX [FLUXU]
 5 BY [FLUXU]
 6 BZ [FLUXU]
 0

  -20.0000000000      -12.0000000000       0.00000000000      -2568.68847765       3864.63554868     -0.787303611117E-14
  -20.0000000000      -12.0000000000      0.500000000000      -2569.43021915       3845.69501660       99.6926201905    
  -20.0000000000      -12.0000000000       1.00000000000      -2567.27237295       3845.45271766       193.186896669    
  -20.0000000000      -12.0000000000       1.50000000000      -2561.62125278       3878.31227810       286.614456428    
  -20.0000000000      -12.0000000000       2.00000000000      -2562.72591297       3915.12790543       378.670204422    
 
}}}

Complete run examples can be found in $ORBIT_ROOT/examples/FieldTracker .