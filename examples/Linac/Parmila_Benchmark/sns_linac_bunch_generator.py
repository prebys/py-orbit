#!/usr/bin/env python

#--------------------------------------------------------
# The classes will generates bunches for pyORBIT and Parmila 
# at the entrance of SNS MEBT accelerator line (by default)
#  It is not parallel !!!!!!!!!
#--------------------------------------------------------

import math
import sys
import os
import random

from orbit.bunch_generators import TwissContainer
from orbit.bunch_generators import KVDist2D, KVDist3D
from orbit.bunch_generators import GaussDist2D, GaussDist3D
from orbit.bunch_generators import WaterBagDist2D, WaterBagDist3D
from orbit.bunch_generators import TwissAnalysis

from bunch import Bunch

class SNS_Linac_BunchGenerator:
	"""
	Generates the pyORBIT and Parmila (dump into file) Bunches.
	Twiss prameters has the folowing units: x in [m], xp in [rad]
	and the X and Y emittances are normalized. The longitudinal emittance 
	is in [GeV*m].
	"""
	def __init__(self,twissX, twissY, twissZ,frequency = 402.5e+6):
		self.twiss = (twissX, twissY, twissZ)
		self.bunch_frequency = frequency
		self.bunch = Bunch()
		syncPart = self.bunch.getSyncParticle()
		#set H- mass
		#self.bunch.mass(0.9382723 + 2*0.000511)
		self.bunch.mass(0.939294)
		self.bunch.charge(-1.0)
		syncPart.kinEnergy(0.0025)
		self.c = 2.99792458e+8    # speed of light in m/sec
		self.beam_current = 0.01  # beam current in mA , design = 38 mA
		self.rf_wave_lenght = self.c/self.bunch_frequency
		
	def getKinEnergy(self):
		"""
		Returns the kinetic energy in GeV
		"""
		return self.bunch.getSyncParticle().kinEnergy()
		
	def setKinEnergy(self, e_kin = 0.0025):
		"""
		Sets the kinetic energy in GeV
		"""
		self.bunch.getSyncParticle().kinEnergy(e_kin)
		
	def getBeamCurrent(self):
		"""
		Returns the beam currect in mA
		"""
		return self.beam_current
		
	def setBeamCurrent(self, current):
		"""
		Sets  the beam currect in mA
		"""
		self.beam_current = current
	
	def getBunch(self, nParticles = 0, distributorClass = WaterBagDist3D):
		"""
		Returns the pyORBIT bunch with particular number of particles.
		"""
		macrosize = (self.beam_current*1.0e-3/self.bunch_frequency)/nParticles
		distributor = distributorClass(self.twiss[0],self.twiss[1],self.twiss[2])
		bunch = Bunch()
		self.bunch.copyEmptyBunchTo(bunch)
		bunch.getSyncParticle().time(0.)	
		bunch.macroSize(macrosize)
		for i in range(nParticles):
			(x,xp,y,yp,z,dE) = distributor.getCoordinates()
			bunch.addParticle(x,xp,y,yp,z,dE)
		return bunch
	
	def dumpParmilaFile(self, bunch, phase_init = -45.0, fileName = 	"parmila_bunch.txt"):
		"""
		Dump the Parmila bunch into the file
		"""
		e_kin = bunch.getSyncParticle().kinEnergy()
		n_particles = bunch.getSize()
		beam_current = bunch.macroSize()*n_particles*self.bunch_frequency*1.0e+3
		parmila_out = open(fileName,"w")
		parmila_out.write("Parmila data from *****  Generated by pyORBIT \n")
		parmila_out.write("Structure number       =          1 \n")
		parmila_out.write("Cell or element number =          0 \n")
		parmila_out.write("Design particle energy =%11.6g     MeV \n"%e_kin)
		parmila_out.write("Number of particles    =%11d           \n"%n_particles)
		parmila_out.write("Beam current           =%11.7f         \n"%beam_current)
		parmila_out.write("RF Frequency           =   402.5000     MHz \n")
		parmila_out.write("Bunch Freq             =   402.5000     MHz \n")
		parmila_out.write("Chopper fraction       =   0.680000  \n")   
		parmila_out.write("The input file particle coordinates were written in double precision. \n")
		parmila_out.write("   x(cm)             xpr(=dx/ds)       y(cm)             ypr(=dy/ds)       phi(radian)        W(MeV) \n")
		part_wave_lenghth = self.rf_wave_lenght*bunch.getSyncParticle().beta()
		for i in range(n_particles):
			(x,xp,y,yp,z,dE) = (bunch.x(i),bunch.xp(i),bunch.y(i),bunch.yp(i),bunch.z(i),bunch.dE(i))
			phi = 2*math.pi*(z/part_wave_lenghth + phase_init/360.)
			kinE = (dE+e_kin)*1.0e+3  # we need in [MeV], but pyORBIT is in [GeV]
			x = x*100.  # pyORBIT in [m] and intermediate file for Parmila in [cm]
			y = y*100.  # pyORBIT in [m] and intermediate file for Parmila in [cm]
			xp = xp     # pyORBIT in [rad] and intermediate file for Parmila in [rad]
			yp = yp     # pyORBIT in [rad] and Pintermediate file for armila in [rad]
			parmila_out.write("%18.11g%18.11g%18.11g%18.11g%18.11g%18.11g \n"%(x,xp,y,yp,phi,kinE))
		parmila_out.close()
	  



