/**
   This class is a source of the electric and magnetic fields in the RF cavity. 
	 The field has axial symmetry and generated by the SuperFish code. This class
	 is a subclass of the BaseFieldSource class from OrbitUtils.
	 The class can represent several RF gaps.
*/

#ifndef SUPER_FISH_RF_FIELD_SOURCE_H
#define SUPER_FISH_RF_FIELD_SOURCE_H


#include <cstdlib>
#include <cmath>

#include "BaseFieldSource.hh"
#include "Grid2D.hh"

using namespace std;

class SuperFishFieldSource: public OrbitUtils::BaseFieldSource
{
public:
	
	/** Constructor for SuperFishFieldSource class */
  SuperFishFieldSource();
	
  /** Destructor */
  virtual ~SuperFishFieldSource();
	
	/** Returns components of the electric and magnetic filds. */
	void getElectricMagneticField(
			double x, double y, double z, double t, 
			double& E_x, double& E_y, double& E_z,
			double& H_x, double& H_y, double& H_z);
	

  /** Sets the field phase. */
	void setPhase(double phase);
	
  /** Returns the field phase. */
	double getPhase();
	
	/** Sets the field center position. */
	void setFieldCenterPos(double field_center_pos);
	
  /** Returns the field center position. */
	double getFieldCenterPos();

  /** Sets the field frequency. */
	void setFrequency(double frequency);
	
  /** Returns the field frequency. */
	double getFrequency();
	
  /** Sets the field amplitude. */
	void setAmplitude(double amplitude);
	
  /** Returns the field amplitude. */
	double getAmplitude();	
	
  /** Sets the field direction along the z-axis. */
	void setDirectionZ(int z_direction);
	
  /** Returns the field direction along the z-axis. */
	int getDirectionZ();
	
  /** 
	   Sets the field symmetry property. If symm == 1 
		 the field is symmetric around the z=0. 
	*/
	void setSymmetry(int symm);
	
  /** Returns the field symmetry property. */
	int getSymmetry();		
		
	/** Returns the field initial time. */
	double getTimeInit();
	
	/** Sets the field initial time. */
	void setTimeInit(double time_init);	
	
	/** Returns the Grid2D instance with Ez field. */
	Grid2D* getGrid2D_Ez();
	
	/** Returns the Grid2D instance with Er field. */
	Grid2D* getGrid2D_Er();
	
	/** Returns the Grid2D instance with H field. */
	Grid2D* getGrid2D_H();
	
	/** Sets the Ez, Er, and H fields. */
	void setGrid2D_Fields(Grid2D* grid2D_Ez_in,Grid2D* grid2D_Er_in,Grid2D* grid2D_H_in);
	
  private:
		
		/** Delete all Grid2D grids. */
		void deleteGrids();
		
		//grids 2D for Ez, Er, and H
		Grid2D* grid2D_Ez;
		Grid2D* grid2D_Er;
		Grid2D* grid2D_H;
		
		//initial phase of the field
		double field_phase;
		
		//field center - position of the center of the field
		double field_center_pos;
		
		//z-axis direction could be +- 1
		int z_direction;
		
		//field symmetry around z=0. 
		//symm == 1 means we have only z >= 0 part of the field
		//symm == 0 no symmetrythe field
		int symm;
		
		// the RF frequency. The unit is Hz.
		double rf_frequency;
		
		//the parameter defines the amplitude of the field 
		double amplitude;
		
		//the initial time
		double time_init;
		
};

#endif
